# Generated by Django 5.1.2 on 2024-12-15 16:39

import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=30, unique=True, validators=[django.core.validators.RegexValidator(message='Username must consist of @ followed by at least three alphanumericals', regex='^@\\w{3,}$')])),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('tutor', 'Tutor'), ('student', 'Student')], default='student', max_length=10)),
                ('expertise', models.TextField(blank=True, help_text='Comma-separated list of programming languages or topics the tutor specializes in.', null=True)),
                ('profile_picture', models.ImageField(blank=True, default='profile_pictures/default.jpg', upload_to='profile_pictures/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ['last_name', 'first_name'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ContactMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('student', 'Student'), ('tutor', 'Tutor')], max_length=10)),
                ('message', models.TextField(blank=True, default='', help_text='Write your message to the admin here')),
                ('reply', models.TextField(blank=True, default='', help_text='Admins reply to message', null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('reply_timestamp', models.DateTimeField(blank=True, help_text="Timestamp of admin's reply", null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invoice_num', models.CharField(max_length=8, unique=True)),
                ('due_date', models.DateField()),
                ('payment_status', models.CharField(choices=[('Paid', 'Paid'), ('Unpaid', 'Unpaid')], max_length=20)),
                ('invoice_date', models.DateField(auto_now_add=True)),
                ('payment_date', models.DateField(blank=True, null=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invoices', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LessonRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('Unallocated', 'Unallocated'), ('Allocated', 'Allocated'), ('Cancelled', 'Cancelled')], default='Unallocated', help_text='The current status of the lesson request.', max_length=20)),
                ('request_date', models.DateTimeField(auto_now_add=True, help_text='The date and time when the lesson request was created.')),
                ('requested_topic', models.TextField(choices=[('python_programming', 'Python Programming'), ('web_development_with_js', 'Web Development with JavaScript'), ('ruby_on_rails', 'Ruby on Rails'), ('ai_and_ml', 'AI and Machine Learning')], default='Python Programming', help_text='Describe what you would like to learn (e.g Web Development with Django).')),
                ('requested_date', models.DateField(blank=True, help_text='Select the date for your lesson.', null=True)),
                ('requested_frequency', models.CharField(choices=[('weekly', 'Weekly'), ('fortnightly', 'Fortnightly')], default='Weekly', help_text='How often would you like your lessons (e.g Weekly, Fortnightly)?', max_length=20)),
                ('requested_duration', models.PositiveIntegerField(choices=[(30, '30 Minutes'), (60, '1 Hour'), (90, '1 Hour and 30 Minutes'), (120, '2 Hours')], default=60, help_text='Lesson duration in minutes.')),
                ('requested_time', models.TimeField(default='09:00:00', help_text='Preferred time for the lesson.')),
                ('experience_level', models.TextField(choices=[('no_experience', 'No Experience'), ('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], default='No Experience', help_text='Describe your level of experience with this topic.')),
                ('additional_notes', models.TextField(blank=True, default='', help_text='Additional information or requests.')),
                ('student', models.ForeignKey(help_text='The student making the lesson request.', on_delete=django.db.models.deletion.CASCADE, related_name='lesson_requests', to=settings.AUTH_USER_MODEL)),
                ('tutor', models.ForeignKey(blank=True, help_text='The tutor assigned to this lesson request. Null if unallocated.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Lesson Request',
                'verbose_name_plural': 'Lesson Requests',
                'ordering': ['-request_date'],
            },
        ),
    ]
